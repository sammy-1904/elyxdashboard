{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api/v1';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\nexport const eventAPI = {\n  // Core datasets\n  getConversations: () => api.get('/conversations'),\n  getDecisions: () => api.get('/decisions'),\n  getJourney: () => api.get('/journey'),\n  getMemberProfile: () => api.get('/member/profile'),\n  getMetrics: () => api.get('/metrics'),\n  // Convenience fetch for a single event by ID\n  getConversation: id => api.get('/conversations').then(res => {\n    return res.data.find(conv => conv.id === id);\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","response","use","error","_error$response","console","data","message","Promise","reject","eventAPI","getConversations","get","getDecisions","getJourney","getMemberProfile","getMetrics","getConversation","id","then","res","find","conv"],"sources":["C:/Users/Sameer Rawat/OneDrive/Desktop/MedicalConvo-AI/elyx-dashboard/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8000/api/v1';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const eventAPI = {\r\n  // Core datasets\r\n  getConversations: () => api.get('/conversations'),\r\n  getDecisions: () => api.get('/decisions'),\r\n  getJourney: () => api.get('/journey'),\r\n  getMemberProfile: () => api.get('/member/profile'),\r\n  getMetrics: () => api.get('/metrics'),\r\n\r\n  // Convenience fetch for a single event by ID\r\n  getConversation: (id) => api.get('/conversations').then(res => {\r\n    return res.data.find(conv => conv.id === id);\r\n  })\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,8BAA8B;AAEnD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACTC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBE,IAAI,KAAIH,KAAK,CAACI,OAAO,CAAC;EAClE,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMO,QAAQ,GAAG;EACtB;EACAC,gBAAgB,EAAEA,CAAA,KAAMf,GAAG,CAACgB,GAAG,CAAC,gBAAgB,CAAC;EACjDC,YAAY,EAAEA,CAAA,KAAMjB,GAAG,CAACgB,GAAG,CAAC,YAAY,CAAC;EACzCE,UAAU,EAAEA,CAAA,KAAMlB,GAAG,CAACgB,GAAG,CAAC,UAAU,CAAC;EACrCG,gBAAgB,EAAEA,CAAA,KAAMnB,GAAG,CAACgB,GAAG,CAAC,iBAAiB,CAAC;EAClDI,UAAU,EAAEA,CAAA,KAAMpB,GAAG,CAACgB,GAAG,CAAC,UAAU,CAAC;EAErC;EACAK,eAAe,EAAGC,EAAE,IAAKtB,GAAG,CAACgB,GAAG,CAAC,gBAAgB,CAAC,CAACO,IAAI,CAACC,GAAG,IAAI;IAC7D,OAAOA,GAAG,CAACd,IAAI,CAACe,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC;EAC9C,CAAC;AACH,CAAC;AAED,eAAetB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}